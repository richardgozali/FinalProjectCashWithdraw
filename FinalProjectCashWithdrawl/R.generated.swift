//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `Amount.json`.
    static let amountJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Amount", pathExtension: "json")
    /// Resource file `Fund.json`.
    static let fundJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Fund", pathExtension: "json")
    /// Resource file `History.json`.
    static let historyJson = Rswift.FileResource(bundle: R.hostingBundle, name: "History", pathExtension: "json")

    /// `bundle.url(forResource: "Amount", withExtension: "json")`
    static func amountJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.amountJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Fund", withExtension: "json")`
    static func fundJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fundJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "History", withExtension: "json")`
    static func historyJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.historyJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `IconCancel`.
    static let iconCancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconCancel")
    /// Image `IconMoney`.
    static let iconMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconMoney")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconCancel", bundle: ..., traitCollection: ...)`
    static func iconCancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconCancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "IconMoney", bundle: ..., traitCollection: ...)`
    static func iconMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconMoney, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 19 localization keys.
    struct localizable {
      /// Value: 8001 Wrong Password
      static let engErrorMessage = Rswift.StringResource(key: "eng.error.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount
      static let engAmountTitle = Rswift.StringResource(key: "eng.amount.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Amount can't be empty
      static let engAmountError = Rswift.StringResource(key: "eng.amount.error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Balance
      static let engBalance = Rswift.StringResource(key: "eng.balance", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cash Withdraw
      static let engCashwithdrawTitle = Rswift.StringResource(key: "eng.cashwithdraw.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create A 6 Pin to Withdraw a Cash
      static let engPinPlaceholder = Rswift.StringResource(key: "eng.pin.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: IDR
      static let engIdr = Rswift.StringResource(key: "eng.idr", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Insert Amount
      static let engAmountPlaceholder = Rswift.StringResource(key: "eng.amount.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Insert Phone Number
      static let engPhonePlaceholder = Rswift.StringResource(key: "eng.phone.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Insufficient Balance
      static let engBalanceTitle = Rswift.StringResource(key: "eng.balance.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Masukan Nomor Telepon
      static let indPhone = Rswift.StringResource(key: "ind.phone", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Mobile number can't be empty
      static let engPhoneError = Rswift.StringResource(key: "eng.phone.error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone Number
      static let engPhoneTitle = Rswift.StringResource(key: "eng.phone.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pin can't be empty
      static let engPinError = Rswift.StringResource(key: "eng.pin.error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Select the source account that you will use for this transaction
      static let engSubtitleSource = Rswift.StringResource(key: "eng.subtitle.source", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Source Fund
      static let engTitle = Rswift.StringResource(key: "eng.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sumber Dana
      static let indTitle = Rswift.StringResource(key: "ind.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Withdrawal Pin
      static let engPinTitle = Rswift.StringResource(key: "eng.pin.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your account balance is insufficient to continue this transaction
      static let engBalanceSubtitle = Rswift.StringResource(key: "eng.balance.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: 8001 Wrong Password
      static func engErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.error.message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.error.message"
        }

        return NSLocalizedString("eng.error.message", bundle: bundle, comment: "")
      }

      /// Value: Amount
      static func engAmountTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.amount.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.amount.title"
        }

        return NSLocalizedString("eng.amount.title", bundle: bundle, comment: "")
      }

      /// Value: Amount can't be empty
      static func engAmountError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.amount.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.amount.error"
        }

        return NSLocalizedString("eng.amount.error", bundle: bundle, comment: "")
      }

      /// Value: Balance
      static func engBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.balance"
        }

        return NSLocalizedString("eng.balance", bundle: bundle, comment: "")
      }

      /// Value: Cash Withdraw
      static func engCashwithdrawTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.cashwithdraw.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.cashwithdraw.title"
        }

        return NSLocalizedString("eng.cashwithdraw.title", bundle: bundle, comment: "")
      }

      /// Value: Create A 6 Pin to Withdraw a Cash
      static func engPinPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.pin.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.pin.placeholder"
        }

        return NSLocalizedString("eng.pin.placeholder", bundle: bundle, comment: "")
      }

      /// Value: IDR
      static func engIdr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.idr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.idr"
        }

        return NSLocalizedString("eng.idr", bundle: bundle, comment: "")
      }

      /// Value: Insert Amount
      static func engAmountPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.amount.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.amount.placeholder"
        }

        return NSLocalizedString("eng.amount.placeholder", bundle: bundle, comment: "")
      }

      /// Value: Insert Phone Number
      static func engPhonePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.phone.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.phone.placeholder"
        }

        return NSLocalizedString("eng.phone.placeholder", bundle: bundle, comment: "")
      }

      /// Value: Insufficient Balance
      static func engBalanceTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.balance.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.balance.title"
        }

        return NSLocalizedString("eng.balance.title", bundle: bundle, comment: "")
      }

      /// Value: Masukan Nomor Telepon
      static func indPhone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ind.phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ind.phone"
        }

        return NSLocalizedString("ind.phone", bundle: bundle, comment: "")
      }

      /// Value: Mobile number can't be empty
      static func engPhoneError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.phone.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.phone.error"
        }

        return NSLocalizedString("eng.phone.error", bundle: bundle, comment: "")
      }

      /// Value: Phone Number
      static func engPhoneTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.phone.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.phone.title"
        }

        return NSLocalizedString("eng.phone.title", bundle: bundle, comment: "")
      }

      /// Value: Pin can't be empty
      static func engPinError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.pin.error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.pin.error"
        }

        return NSLocalizedString("eng.pin.error", bundle: bundle, comment: "")
      }

      /// Value: Select the source account that you will use for this transaction
      static func engSubtitleSource(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.subtitle.source", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.subtitle.source"
        }

        return NSLocalizedString("eng.subtitle.source", bundle: bundle, comment: "")
      }

      /// Value: Source Fund
      static func engTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.title"
        }

        return NSLocalizedString("eng.title", bundle: bundle, comment: "")
      }

      /// Value: Sumber Dana
      static func indTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ind.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ind.title"
        }

        return NSLocalizedString("ind.title", bundle: bundle, comment: "")
      }

      /// Value: Withdrawal Pin
      static func engPinTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.pin.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.pin.title"
        }

        return NSLocalizedString("eng.pin.title", bundle: bundle, comment: "")
      }

      /// Value: Your account balance is insufficient to continue this transaction
      static func engBalanceSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("eng.balance.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "eng.balance.subtitle"
        }

        return NSLocalizedString("eng.balance.subtitle", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
